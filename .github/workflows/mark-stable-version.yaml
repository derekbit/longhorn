name: Update Releases # Name of the workflow

on:
  workflow_dispatch: # Trigger the workflow manually
    inputs:
      stable_version: # Input parameter for stable version
        description: 'Version to mark as stable (e.g., 1.7.2)' # Parameter description
        required: false # Not a required parameter
      inactive_release: # Input parameter for inactive release
        description: 'Version to mark as inactive (e.g., 1.5)' # Parameter description
        required: false # Not a required parameter

jobs:
  update-releases: # Job to update release information
    runs-on: ubuntu-latest # Run on the latest Ubuntu version
    steps:
      - uses: actions/checkout@v3 # Check out the code

      - name: Install Packages # Install necessary packages
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get Releases # Get release information from GitHub API
        id: get_releases # Set the step ID for future reference
        run: |
          curl -sSL https://api.github.com/repos/derekbit/longhorn/releases | jq '.[]' > releases.json # Use curl to get JSON data and jq to process it, saving to releases.json

      - name: Mark Stable Version # Step to mark a stable version
        if: github.event.inputs.stable_version != '' # Only run if stable_version is provided
        run: |
          stable_version="${{ github.event.inputs.stable_version }}" # Get the input stable version
          echo "Input stable version: $stable_version" # Output debug message
          major_version="${stable_version%%.*}" # Extract the major version number (e.g., 1.7.2 becomes 1.7)
          echo "Major version: $major_version" # Output debug message

          # Check if the major version exists in README.md
          if grep -q "| \*\*${major_version}\*\*\* |" README.md; then # Use grep -q for silent check
            echo "Found major version in README.md: ${major_version}" # Output debug message
            # Use a more precise sed command to ensure only the target line is modified
            if sed -i "s/| \*\*${major_version}\*\*\*  |.*| ${stable_version} |/| \*\*${major_version}\*\*\*  |.*| ${stable_version} (Stable) |/" README.md; then # Use sed to replace the string
              echo "Successfully marked ${stable_version} as stable." # Output success message
              grep "| \*\*${major_version}\*\*\*  |.*| ${stable_version} (Stable) |" README.md # Use grep to verify the modification and output the result
            else
              echo "Failed to mark ${stable_version} as stable! Check the sed command." # Output error message
              exit 1 # Fail the workflow to prevent further errors
            fi
          else
            echo "Major version ${major_version} not found in README.md, cannot mark as stable." # Output error message
            exit 1 # Fail the workflow
          fi

      - name: Mark Inactive Release # Step to mark an inactive release
        if: github.event.inputs.inactive_release != '' # Only run if inactive_release is provided
        run: |
          inactive_release="${{ github.event.inputs.inactive_release }}" # Get the input inactive release
          echo "Input inactive version: $inactive_release" # Output debug message

          # Check if the version number exists in README.md
          if grep -q "| ${inactive_release} |" README.md; then # Use grep -q for silent check
            echo "Found version number in README.md: ${inactive_release}" # Output debug message
            # Use a more precise sed command
            if sed -i "s/| ${inactive_release} |.*| âœ… |/| ${inactive_release} |.*|   |/" README.md; then # Use sed to replace the string
              echo "Successfully marked ${inactive_release} as inactive." # Output success message
              grep "| ${inactive_release} |.*|   |" README.md # Use grep to verify the modification and output the result
            else
              echo "Failed to mark ${inactive_release} as inactive! Check the sed command." # Output error message
              exit 1 # Fail the workflow
            fi
          else
            echo "Version number ${inactive_release} not found in README.md, cannot mark as inactive." # Output error message
            exit 1 # Fail the workflow
          fi

      - name: Commit changes # Commit the modified README.md
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Update Releases information" # Commit message
          branch: ${{ github.ref }} # Push to the branch that triggered the workflow